---@param context                       t.ghc.ux.IThemeContext
---@return table<string, t.fml.ux.theme.IHlgroup>
local function gen_hlgroup_map(context)
  local c = context.scheme.palette ---@type t.fml.ux.theme.IPalette
  local t = context.transparency ---@type boolean

  return {
    ---cursor
    Cursor = { fg = c.bg1, bg = c.fg },
    CursorColumn = { bg = c.bg1 },
    CursorLine = { bg = c.bg1 },
    CursorLineNr = { fg = c.yellow, bg = c.bg1 },
    vCursor = { link = "Cursor" },
    iCursor = { link = "Cursor" },
    lCursor = { link = "Cursor" },

    ---diagnostic
    Error = { fg = c.bg0, bg = c.red },
    DiagnosticError = { fg = c.red },
    DiagnosticHint = { fg = c.purple },
    DiagnosticInfo = { fg = c.green },
    DiagnosticWarn = { fg = c.yellow },
    DiagnosticFloatingError = { fg = c.red },
    DiagnosticFloatingHint = { fg = c.purple },
    DiagnosticFloatingInfo = { fg = c.green },
    DiagnosticFloatingWarn = { fg = c.orange },
    DiagnosticUnderlineError = { undercurl = true, sp = c.red },
    DiagnosticUnderlineHint = { undercurl = true, sp = c.purple },
    DiagnosticUnderlineInfo = { undercurl = true, sp = c.green },
    DiagnosticUnderlineWarn = { undercurl = true, sp = c.yellow },
    DiagnosticVirtualTextError = { fg = c.red },
    DiagnosticVirtualTextHint = { fg = c.purple },
    DiagnosticVirtualTextInfo = { fg = c.green },
    DiagnosticVirtualTextWarn = { fg = c.yellow },
    DiagnosticOk = { fg = c.green, bg = t and "none" or c.bg1 },
    DiagnosticSignError = { fg = c.red, bg = t and "none" or c.bg1 },
    DiagnosticSignHint = { fg = c.purple, bg = t and "none" or c.bg1 },
    DiagnosticSignInfo = { fg = c.green, bg = t and "none" or c.bg1 },
    DiagnosticSignWarn = { fg = c.yellow, bg = t and "none" or c.bg1 },

    ---diff
    DiffAdd = { bg = c.neutral_green },
    DiffDelete = { bg = c.neutral_red },
    DiffChange = { bg = c.neutral_aqua },
    DiffText = { fg = c.bg0, bg = c.yellow },
    DiffAdded = { link = "DiffAdd" },
    DiffRemoved = { link = "DiffDelete" },
    DiffChanged = { link = "DiffChange" },
    DiffFile = { fg = c.orange },
    DiffNewFile = { fg = c.yellow },
    DiffOldFile = { fg = c.orange },
    DiffLine = { fg = c.blue },
    DiffIndexLine = { link = "diffChanged" },

    ---lsp
    LspInlayHint = { fg = c.grey, bg = c.bg0_s },
    LspReferenceRead = { bold = true, underline = true, sp = c.neutral_purple },
    LspReferenceText = { bold = true, underline = true, sp = c.neutral_purple },
    LspReferenceWrite = { bold = true, underline = true, sp = c.neutral_purple },
    LspSignatureActiveParameter = { fg = c.bg0_s, bg = c.green },
    RenamerBorder = { fg = c.red },
    RenamerTitle = { fg = c.bg0_s, bg = c.red },

    ---spell
    healthSuccess = { fg = c.bg0, bg = c.green },
    SpellBad = { undercurl = true, sp = c.red },
    SpellCap = { undercurl = true, sp = c.blue },
    SpellLocal = { undercurl = true, sp = c.aqua },
    SpellRare = { undercurl = true, sp = c.purple },

    ---special
    Delimiter = { fg = c.purple },
    EndOfBuffer = { fg = c.bg2 },
    NonText = { fg = c.bg2 },
    Whitespace = { fg = c.bg2 },

    ---syntax
    Boolean = { fg = c.purple },
    Character = { fg = c.purple },
    Conditional = { fg = c.red },
    Constant = { fg = c.purple },
    Define = { fg = c.aqua },
    Float = { fg = c.purple },
    Function = { fg = c.blue, bold = true },
    Identifier = { fg = c.blue },
    Include = { fg = c.aqua },
    Keyword = { fg = c.red },
    Label = { fg = c.red },
    Macro = { fg = c.aqua },
    Number = { fg = c.purple },
    Operator = { fg = c.fg0 },
    PreCondit = { fg = c.aqua },
    PreProc = { fg = c.yellow },
    Repeat = { fg = c.red },
    Special = { fg = c.aqua },
    SpecialChar = { fg = c.neutral_red },
    Statement = { fg = c.red },
    StorageClass = { fg = c.orange },
    String = { fg = c.green },
    Structure = { fg = c.aqua },
    Type = { fg = c.yellow },
    Typedef = { fg = c.yellow },
    Variable = { fg = c.fg0 },

    ---tag
    Tag = { fg = c.yellow },
    Todo = { fg = c.bg0, bg = c.yellow, bold = true, italic = true },
    Done = { fg = c.orange, bold = true, italic = true },

    ---misc
    Added = { fg = c.green },
    Bold = { bold = true },
    Changed = { fg = c.yellow },
    ColorColumn = { bg = c.bg1 },
    Comment = { fg = c.neutral_grey, italic = true },
    Conceal = { fg = c.blue },
    CurSearch = { fg = c.bg0, bg = c.orange },
    Debug = { fg = c.red },
    DevIconDefault = { fg = c.red },
    Directory = { fg = c.blue, bold = true },
    ErrorMsg = { fg = c.bg0, bg = c.red, bold = true },
    Exception = { fg = c.red },
    FloatTitle = { fg = c.fg0, bg = "none" },
    FloatBorder = { fg = c.neutral_orange },
    FoldColumn = { fg = c.grey, bg = t and "none" or c.bg1 },
    Folded = { fg = c.grey, bg = c.bg1 },
    IncSearch = { fg = c.bg0, bg = c.orange },
    Italic = { italic = true },
    LineNr = { fg = c.bg4 },
    MatchParen = { bg = c.bg3, bold = true },
    MatchWord = { bg = c.grey, fg = c.fg0 },
    ModeMsg = { fg = c.yellow, bold = true },
    MoreMsg = { fg = c.yellow, bold = true },
    Normal = { fg = c.fg1, bg = t and "none" or c.bg0 },
    NormalFloat = { fg = c.fg1, bg = t and "none" or c.bg1 },
    NormalNC = { link = "Normal" },
    NvimInternalError = { fg = c.red },
    Pmenu = { fg = c.fg1, bg = c.bg2 },
    PmenuSbar = { bg = c.bg2 },
    PmenuSel = { fg = c.bg2, bg = c.blue, bold = true },
    PmenuThumb = { bg = c.bg4 },
    Question = { fg = c.blue, bold = true },
    QuickFixLine = { fg = c.purple },
    Removed = { fg = c.red },
    Search = { fg = c.bg0, bg = c.yellow, reverse = false },
    SignColumn = { bg = t and "none" or c.bg1 },
    SpecialKey = { fg = c.fg4 },
    StatusLine = { fg = c.bg2, bg = c.fg1, reverse = false },
    StatusLineNC = { fg = c.bg1, bg = c.fg4, reverse = false },
    Substitute = { fg = c.bg1, bg = c.yellow, sp = "none" },
    TabLine = { fg = c.bg4, bg = c.bg1, reverse = false },
    TabLineFill = { fg = c.bg4, bg = c.bg1, reverse = false },
    TabLineSel = { fg = c.green, bg = c.bg1, reverse = false },
    Title = { fg = c.blue, bold = true },
    TooLong = { fg = c.red },
    UnderLined = { fg = c.blue, underline = true },
    VertSplit = { fg = c.fg2 },
    VertSplitActive = { fg = c.neutral_orange },
    Visual = { bg = c.bg3, reverse = false },
    VisualNOS = { link = "Visual" },
    WarningMsg = { fg = c.red, bold = true },
    WildMenu = { fg = c.blue, bg = c.bg2, bold = true },
    WinBar = { fg = c.fg4, bg = c.bg0 },
    WinBarNC = { fg = c.fg3, bg = c.bg1 },
    WinSeparator = { fg = c.bg3, bg = t and "none" or c.bg0 },
    WinSeparatorActive = { fg = c.neutral_orange },
  }
end

return gen_hlgroup_map
