---@class ghc.ui.theme.highlight
local M = {}

---@type ghc.enum.ui.theme.HighlightIntegration[]
M.integrations = {
  --- orders as needed
  "default",
  "treesitter",
  "nvim_web_devicons",
  "nvim_lspconfig",

  ---
  "flash",
  "gitsigns",
  "indent_blank_line",
  "mason",
  "nvim_cmp",
  "nvim_dap",
  "nvim_dap_ui",
  "nvim_navic",
  "telescope",
  "trouble",
  "vim_illuminate",
  "vim_notify",
  "which_key",
}

---@param params                        ghc.types.ui.theme.IGenHlgroupMapParams
---@return table<ghc.enum.ui.theme.HighlightIntegration, table<string, fml.types.ui.theme.IHlgroup|nil>>
function M.gen_hlgroup_map(params)
  local scheme = params.scheme ---@type fml.types.ui.theme.IScheme
  local transparency = params.transparency ---@type boolean
  local c = scheme.colors
  local t = transparency

  ---@type table<ghc.enum.ui.theme.HighlightIntegration, table<string, fml.types.ui.theme.IHlgroup|nil>>
  local hlgroup_map = {
    default = {
      ---bufferline
      ghc_bufferline_neotree_blank = { fg = c.white, bg = t and "none" or c.black2 },
      ghc_bufferline_neotree_icon = { fg = c.white, bg = t and "none" or c.black2 },
      ghc_bufferline_neotree_text = { fg = c.white, bg = t and "none" or c.black2 },

      ---common
      f_transparent = { bg = "none" },

      ---diff
      ghc_DiffAdd_left = { bg = "#FFE0E0", fg = "none" },
      ghc_DiffDelete_left = { bg = "#FFE0E0", fg = "none" },
      ghc_DiffChange_left = { bg = "#FFE0E0", fg = "none" },
      ghc_DiffText_left = { bg = "#FFC0C0", fg = "none" },
      ghc_DiffAdd_right = { bg = "#D0FFD0", fg = "none" },
      ghc_DiffDelete_right = { bg = "#FFE0E0", fg = "none" },
      ghc_DiffChange_right = { bg = "#D0FFD0", fg = "none" },
      ghc_DiffText_right = { bg = "#A0EFA0", fg = "none" },

      ---lazy_nvim
      --LazyButton = { bg = c.one_bg, fg = fml.color.change_hex_lightness("light_grey", vim.o.bg == c.dark and 10 or -20) },
      LazyCommit = { fg = c.green },
      LazyCommitIssue = { fg = c.pink },
      LazyDir = { fg = c.base05 },
      LazyH1 = { bg = c.green, fg = c.black },
      LazyH2 = { fg = c.red, bold = true, underline = true },
      LazyNoCond = { fg = c.red },
      LazyOperator = { fg = c.white },
      LazyProgressDone = { fg = c.green },
      LazyReasonCmd = { fg = c.sun },
      LazyReasonEvent = { fg = c.yellow },
      LazyReasonFt = { fg = c.purple },
      LazyReasonImport = { fg = c.white },
      LazyReasonKeys = { fg = c.teal },
      LazyReasonPlugin = { fg = c.red },
      LazyReasonRuntime = { fg = c.nord_blue },
      LazyReasonSource = { fg = c.cyan },
      LazyReasonStart = { fg = c.white },
      LazySpecial = { fg = c.blue },
      LazyTaskOutput = { fg = c.white },
      LazyUrl = { fg = c.base05 },
      LazyValue = { fg = c.teal },

      ---misc
      Added = { fg = c.green },
      Bold = { bold = true },
      Changed = { fg = c.yellow },
      ColorColumn = { bg = c.black2 },
      Comment = { fg = c.grey_fg },
      Conceal = { bg = "none" },
      Cursor = { fg = c.base00, bg = c.base05 },
      CursorColumn = { bg = c.base01, sp = "none" },
      CursorLine = { bg = c.one_bg2 },
      CursorLineNr = { fg = c.white },
      Debug = { fg = c.base08 },
      DevIconDefault = { fg = c.red },
      Directory = { fg = c.base0D },
      Error = { fg = c.base00, bg = c.base08 },
      ErrorMsg = { fg = c.base08, bg = c.base00 },
      Exception = { fg = c.base08 },
      FloatBorder = { fg = c.blue },
      Folded = { fg = c.light_grey, bg = c.black2 },
      FoldColumn = { fg = c.base0C, bg = c.base01 },
      IncSearch = { fg = c.base01, bg = c.base09 },
      Italic = { italic = true },
      LineNr = { fg = c.grey },
      Macro = { fg = c.base08 },
      MatchParen = { link = "MatchWord" },
      MatchWord = { bg = c.grey, fg = c.white },
      ModeMsg = { fg = c.base0B },
      MoreMsg = { fg = c.base0B },
      NonText = { fg = c.base03 },
      Normal = { fg = c.base05, bg = c.base00 },
      NormalFloat = { bg = c.darker_black },
      NvimInternalError = { fg = c.red },
      Pmenu = { bg = c.one_bg },
      PmenuSbar = { bg = c.one_bg },
      PmenuSel = { bg = c.pmenu_bg, fg = c.black },
      Question = { fg = c.base0D },
      QuickFixLine = { bg = c.base01, sp = "none" },
      PmenuThumb = { bg = c.grey },
      Removed = { fg = c.red },
      Search = { fg = c.base01, bg = c.base0A },
      SignColumn = { fg = c.base03, sp = "none" },
      SpecialKey = { fg = c.base03 },
      Substitute = { fg = c.base01, bg = c.base0A, sp = "none" },
      Title = { fg = c.base0D, sp = "none" },
      TooLong = { fg = c.base08 },
      UnderLined = { underline = true },
      Visual = { bg = c.light_grey },
      VisualNOS = { fg = c.base08 },
      WarningMsg = { fg = c.base08 },
      WinSeparator = { fg = c.line },
      WildMenu = { fg = c.base08, bg = c.base0A },

      ---replace
      GhcReplaceFilepath = { fg = c.blue, bg = "none" },
      GhcReplaceFlag = { fg = c.white, bg = c.grey },
      GhcReplaceFlagEnabled = { fg = c.black, bg = c.baby_pink },
      GhcReplaceFence = { fg = c.grey, bg = "none" },
      GhcReplaceInvisible = { fg = "none", bg = "none" },
      GhcReplaceOptName = { fg = c.blue, bg = "none", bold = true },
      GhcReplaceOptReplacePattern = { fg = c.diff_add_hl, bg = "none" },
      GhcReplaceOptSearchPattern = { fg = c.diff_delete_hl, bg = "none" },
      GhcReplaceOptValue = { fg = c.yellow, bg = "none" },
      GhcReplaceTextAdded = { fg = c.diff_add_hl, bg = "none" },
      GhcReplaceTextDeleted = { fg = c.diff_delete_hl, strikethrough = true },
      GhcReplaceUsage = { fg = c.grey_fg2, bg = "none" },

      ---spell
      healthSuccess = { bg = c.green, fg = c.black },
      SpellBad = { undercurl = true, sp = c.base08 },
      SpellCap = { undercurl = true, sp = c.base0D },
      SpellLocal = { undercurl = true, sp = c.base0C },
      SpellRare = { undercurl = true, sp = c.base0E },

      ---statusline
      f_sl_bg = { fg = t and "none" or c.statusline_bg, bg = t and "none" or c.statusline_bg },
      f_sl_copilot_InProgress = { fg = c.cyan, bg = t and "none" or c.statusline_bg },
      f_sl_copilot_Normal = { fg = c.blue, bg = t and "none" or c.statusline_bg },
      f_sl_copilot_Warning = { fg = c.yellow, bg = t and "none" or c.statusline_bg },
      f_sl_diagnostics_error = { fg = c.red, bg = t and "none" or c.statusline_bg },
      f_sl_diagnostics_hint = { fg = c.purple, bg = t and "none" or c.statusline_bg },
      f_sl_diagnostics_info = { fg = c.green, bg = t and "none" or c.statusline_bg },
      f_sl_diagnostics_warn = { fg = c.yellow, bg = t and "none" or c.statusline_bg },
      f_sl_flag = { fg = c.white, bg = t and "none" or c.grey },
      f_sl_flag_enabled = { fg = c.black, bg = c.nord_blue },
      f_sl_flag_scope = { fg = c.black, bg = c.baby_pink },
      f_sl_noice_command = { fg = c.white, bg = t and "none" or c.statusline_bg },
      f_sl_noice_mode = { fg = c.yellow, bg = t and "none" or c.statusline_bg },
      f_sl_readonly = { fg = c.orange, bg = t and "none" or c.statusline_bg },
      f_sl_text = { fg = c.white, bg = t and "none" or c.statusline_bg },
      f_sl_text_command = { fg = c.vibrant_green, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_confirm = { fg = c.teal, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_insert = { fg = c.dark_purple, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_normal = { fg = c.nord_blue, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_nterminal = { fg = c.yellow, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_replace = { fg = c.orange, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_select = { fg = c.blue, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_terminal = { fg = c.green, bg = t and "none" or c.statusline_bg, bold = true },
      f_sl_text_visual = { fg = c.cyan, bg = t and "none" or c.statusline_bg },
      f_sl_username = { fg = c.black, bg = c.cyan },

      ---tabline
      f_tl_bg = { fg = t and "none" or c.statusline_bg, bg = t and "none" or c.statusline_bg },
      f_tl_buf_item = { fg = c.light_grey, bg = t and "none" or c.black2 },
      f_tl_buf_item_cur = { fg = c.white, bg = t and "none" or c.black },
      f_tl_buf_mod = { fg = c.red, bg = t and "none" or c.black2 },
      f_tl_buf_mod_cur = { fg = c.green, bg = t and "none" or c.black },
      f_tl_buf_title = { fg = c.light_grey, bg = t and "none" or c.black2 },
      f_tl_buf_title_cur = { fg = c.white, bg = t and "none" or c.black },
      f_tl_neotree_blank = { fg = c.white, bg = t and "none" or c.black2 },
      f_tl_neotree_text = { fg = c.white, bg = t and "none" or c.black2 },
      f_tl_tab_add = { fg = c.white, bg = c.one_bg2 },
      f_tl_tab_item = { fg = c.white, bg = c.black2 },
      f_tl_tab_item_cur = { fg = c.red },
      f_tl_tab_toggle = { fg = c.black, bg = c.blue },
    },
    flash = {
      FlashBackdrop = { fg = c.grey_fg, bg = "none", italic = true },
      FlashCursor = { fg = c.red, bg = t and "none" or "grey" },
      FlashLabel = { fg = c.white, bg = t and "none" or "grey" },
      FlashMatch = { fg = c.cyan, bg = t and "none" or "grey" },
    },
    gitsigns = {
      DiffAdd = { fg = c.blue },
      DiffAdded = { fg = c.green },
      DiffChange = { fg = c.light_grey },
      DiffChangeDelete = { fg = c.red },
      DiffDelete = { fg = c.red },
      DiffModified = { fg = c.orange },
      diffNewFile = { fg = c.blue },
      diffOldFile = { fg = c.baby_pink },
      DiffRemoved = { fg = c.red },
      DiffText = { fg = c.white, bg = c.black2 },
      gitcommitBranch = { fg = c.base09, bold = true },
      gitcommitComment = { fg = c.base03 },
      gitcommitDiscarded = { fg = c.base03 },
      gitcommitDiscardedFile = { fg = c.base08, bold = true },
      gitcommitDiscardedType = { fg = c.base0D },
      gitcommitHeader = { fg = c.base0E },
      gitcommitOverflow = { fg = c.base08 },
      gitcommitSelected = { fg = c.base03 },
      gitcommitSelectedFile = { fg = c.base0B, bold = true },
      gitcommitSelectedType = { fg = c.base0D },
      gitcommitSummary = { fg = c.base0B },
      gitcommitUnmergedFile = { fg = c.base08, bold = true },
      gitcommitUnmergedType = { fg = c.base0D },
      gitcommitUntracked = { fg = c.base03 },
      gitcommitUntrackedFile = { fg = c.base0A },
    },
    indent_blank_line = {
      IblChar = { fg = c.line },
      IblScopeChar = { fg = c.grey },
      ["@ibl.scope.underline.1"] = { bg = c.black2 },
    },
    mason = {
      MasonHeader = { fg = c.black, bg = c.red },
      MasonHighlight = { fg = c.blue },
      MasonHighlightBlock = { fg = c.black, bg = c.green },
      MasonHighlightBlockBold = { link = "MasonHighlightBlock" },
      MasonHeaderSecondary = { link = "MasonHighlightBlock" },
      MasonMuted = { fg = c.light_grey },
      MasonMutedBlock = { fg = c.light_grey, bg = c.one_bg },
    },
    nvim_cmp = {
      CmpBorder = { fg = c.grey_fg },
      CmpDoc = t and { fg = c.grey_fg, bg = "none" } or nil,
      CmpItemKindClass = { fg = c.teal },
      CmpItemKindCodeium = { fg = c.vibrant_green },
      CmpItemKindColor = { fg = c.white },
      CmpItemKindConstant = { fg = c.base09 },
      CmpItemKindConstructor = { fg = c.blue },
      CmpItemKindCopilot = { fg = c.green },
      CmpItemKindEnum = { fg = c.blue },
      CmpItemKindEnumMember = { fg = c.purple },
      CmpItemKindEvent = { fg = c.yellow },
      CmpItemKindField = { fg = c.base08 },
      CmpItemKindFile = { fg = c.base07 },
      CmpItemKindFolder = { fg = c.base07 },
      CmpItemKindFunction = { fg = c.base0D },
      CmpItemKindIdentifier = { fg = c.base08 },
      CmpItemKindInterface = { fg = c.green },
      CmpItemKindKeyword = { fg = c.base07 },
      CmpItemKindMethod = { fg = c.base0D },
      CmpItemKindModule = { fg = c.base0A },
      CmpItemKindOperator = { fg = c.base05 },
      CmpItemKindProperty = { fg = c.base08 },
      CmpItemKindReference = { fg = c.base05 },
      CmpItemKindSnippet = { fg = c.red },
      CmpItemKindStruct = { fg = c.base0E },
      CmpItemKindStructure = { fg = c.base0E },
      CmpItemKindTabNine = { fg = c.baby_pink },
      CmpItemKindText = { fg = c.base0B },
      CmpItemKindType = { fg = c.base0A },
      CmpItemKindTypeParameter = { fg = c.base08 },
      CmpItemKindUnit = { fg = c.base0E },
      CmpItemKindValue = { fg = c.cyan },
      CmpItemKindVariable = { fg = c.base0E },
    },
    nvim_dap = {
      DapBreakpoint = { fg = c.red },
      DapBreakpointCondition = { fg = c.yellow },
      DapLogPoint = { fg = c.cyan },
      DapStopped = { fg = c.baby_pink },
    },
    nvim_dap_ui = {
      DapUIBreakPointsCurrentLine = { fg = c.green, bold = true },
      DapUIBreakpointsDisabledLine = { fg = c.grey_fg2 },
      DapUIBreakpointsInfo = { fg = c.green },
      DapUIBreakpointsPath = { fg = c.cyan },
      DapUIDecoration = { fg = c.cyan },
      DapUIFloatBorder = { fg = c.cyan },
      DapUILineNumber = { fg = c.cyan },
      DapUIModifiedValue = { fg = c.orange },
      DapUIPlayPause = { fg = c.green },
      DapUIPlayPauseNC = { fg = c.green },
      DapUIRestart = { fg = c.green },
      DapUIRestartNC = { fg = c.green },
      DAPUIScope = { fg = c.cyan },
      DapUISource = { fg = c.lavender },
      DapUIStepBack = { fg = c.blue },
      DapUIStepBackNC = { fg = c.blue },
      DapUIStepInto = { fg = c.blue },
      DapUIStepIntoNC = { fg = c.blue },
      DapUIStepOut = { fg = c.blue },
      DapUIStepOutNC = { fg = c.blue },
      DapUIStepOver = { fg = c.blue },
      DapUIStepOverNC = { fg = c.blue },
      DapUIStop = { fg = c.red },
      DapUIStopNC = { fg = c.red },
      DapUIStoppedThread = { fg = c.cyan },
      DapUIThread = { fg = c.green },
      DAPUIType = { fg = c.dark_purple },
      DapUIUnavailable = { fg = c.grey_fg },
      DapUIUnavailableNC = { fg = c.grey_fg },
      DAPUIValue = { fg = c.cyan },
      DAPUIVariable = { fg = c.white },
      DapUIWatchesEmpty = { fg = c.baby_pink },
      DapUIWatchesError = { fg = c.baby_pink },
      DapUIWatchesValue = { fg = c.green },
    },
    nvim_lspconfig = {
      ["@lsp.type.class"] = { link = "Structure" },
      ["@lsp.type.decorator"] = { link = "Function" },
      ["@lsp.type.enum"] = { link = "Type" },
      ["@lsp.type.enumMember"] = { link = "Constant" },
      ["@lsp.type.function"] = { link = "@function" },
      ["@lsp.type.interface"] = { link = "Structure" },
      ["@lsp.type.macro"] = { link = "@macro" },
      ["@lsp.type.method"] = { link = "@function.method" },
      ["@lsp.type.namespace"] = { link = "@module" },
      ["@lsp.type.parameter"] = { link = "@variable.parameter" },
      ["@lsp.type.property"] = { link = "@property" },
      ["@lsp.type.struct"] = { link = "Structure" },
      ["@lsp.type.type"] = { link = "@type" },
      ["@lsp.type.typeParamater"] = { link = "TypeDef" },
      ["@lsp.type.variable"] = { link = "@variable" },
      LspReferenceText = { fg = c.darker_black, bg = c.white },
      LspReferenceRead = { fg = c.darker_black, bg = c.white },
      LspReferenceWrite = { fg = c.darker_black, bg = c.white },
      DiagnosticHint = { fg = c.purple },
      DiagnosticError = { fg = c.red },
      DiagnosticWarn = { fg = c.yellow },
      DiagnosticInfo = { fg = c.green },
      LspSignatureActiveParameter = { fg = c.black, bg = c.green },
      RenamerTitle = { fg = c.black, bg = c.red },
      RenamerBorder = { fg = c.red },
      --LspInlayHint = { bg = fml.color.change_hex_lightness("black2", vim.o.bg == c.dark and 0 or 3), fg = c.light_grey },
    },
    nvim_navic = {
      NavicIconsArray = { fg = c.blue, bg = c.statusline_bg },
      NavicIconsBoolean = { fg = c.orange, bg = c.statusline_bg },
      NavicIconsClass = { fg = c.teal, bg = c.statusline_bg },
      NavicIconsColor = { fg = c.white, bg = c.statusline_bg },
      NavicIconsConstant = { fg = c.base09, bg = c.statusline_bg },
      NavicIconsConstructor = { fg = c.blue, bg = c.statusline_bg },
      NavicIconsEnum = { fg = c.blue, bg = c.statusline_bg },
      NavicIconsEnumMember = { fg = c.purple, bg = c.statusline_bg },
      NavicIconsEvent = { fg = c.yellow, bg = c.statusline_bg },
      NavicIconsField = { fg = c.base08, bg = c.statusline_bg },
      NavicIconsFile = { fg = c.base07, bg = c.statusline_bg },
      NavicIconsFolder = { fg = c.base07, bg = c.statusline_bg },
      NavicIconsFunction = { fg = c.base0D, bg = c.statusline_bg },
      NavicIconsIdentifier = { fg = c.base08, bg = c.statusline_bg },
      NavicIconsInterface = { fg = c.green, bg = c.statusline_bg },
      NavicIconsKey = { fg = c.red, bg = c.statusline_bg },
      NavicIconsKeyword = { fg = c.base07, bg = c.statusline_bg },
      NavicIconsMethod = { fg = c.base0D, bg = c.statusline_bg },
      NavicIconsModule = { fg = c.base0A, bg = c.statusline_bg },
      NavicIconsNamespace = { fg = c.teal, bg = c.statusline_bg },
      NavicIconsNull = { fg = c.cyan, bg = c.statusline_bg },
      NavicIconsNumber = { fg = c.pink, bg = c.statusline_bg },
      NavicIconsObject = { fg = c.base0E, bg = c.statusline_bg },
      NavicIconsOperator = { fg = c.base05, bg = c.statusline_bg },
      NavicIconsPackage = { fg = c.green, bg = c.statusline_bg },
      NavicIconsProperty = { fg = c.base08, bg = c.statusline_bg },
      NavicIconsReference = { fg = c.base05, bg = c.statusline_bg },
      NavicIconsSnippet = { fg = c.red, bg = c.statusline_bg },
      NavicIconsString = { fg = c.green, bg = c.statusline_bg },
      NavicIconsStruct = { fg = c.base0E, bg = c.statusline_bg },
      NavicIconsStructure = { fg = c.base0E, bg = c.statusline_bg },
      NavicIconsText = { fg = c.base0B, bg = c.statusline_bg },
      NavicIconsType = { fg = c.base0A, bg = c.statusline_bg },
      NavicIconsTypeParameter = { fg = c.base08, bg = c.statusline_bg },
      NavicIconsVariable = { fg = c.base0E, bg = c.statusline_bg },
      NavicIconsUnit = { fg = c.base0E, bg = c.statusline_bg },
      NavicIconsValue = { fg = c.cyan, bg = c.statusline_bg },
      NavicSeparator = { fg = c.red, bg = c.statusline_bg },
      NavicText = { fg = c.light_grey, bg = c.statusline_bg },
    },
    nvim_web_devicons = {
      DevIconDart = { fg = c.cyan },
      DevIconDockerfile = { fg = c.cyan },
      DevIconJava = { fg = c.orange },
      DevIconJSX = { fg = c.blue },
      DevIconMd = { fg = c.blue },
      DevIconSvelte = { fg = c.red },
      DevIconTSX = { fg = c.blue },
      DevIconZig = { fg = c.orange },
      DevIconc = { fg = c.blue },
      DevIconcss = { fg = c.blue },
      DevIcondeb = { fg = c.cyan },
      DevIconhtml = { fg = c.baby_pink },
      DevIconjpeg = { fg = c.dark_purple },
      DevIconjpg = { fg = c.dark_purple },
      DevIconjs = { fg = c.sun },
      DevIconkt = { fg = c.orange },
      DevIconlock = { fg = c.red },
      DevIconlua = { fg = c.blue },
      DevIconmp3 = { fg = c.white },
      DevIconmp4 = { fg = c.white },
      DevIconout = { fg = c.white },
      DevIconpng = { fg = c.dark_purple },
      DevIconpy = { fg = c.cyan },
      DevIconrb = { fg = c.pink },
      DevIconrpm = { fg = c.orange },
      DevIcontoml = { fg = c.blue },
      DevIconts = { fg = c.teal },
      DevIconttf = { fg = c.white },
      DevIconvue = { fg = c.vibrant_green },
      DevIconwoff = { fg = c.white },
      DevIconwoff2 = { fg = c.white },
      DevIconxz = { fg = c.sun },
      DevIconzip = { fg = c.sun },
    },
    telescope = {
      TelescopeBorder = t and { fg = c.grey, bg = "none" } or { fg = c.darker_black, bg = c.darker_black },
      TelescopeMatching = { bg = c.one_bg, fg = c.blue },
      TelescopeNormal = { bg = c.darker_black },
      TelescopePreviewTitle = { fg = c.black, bg = c.green },
      TelescopePromptBorder = t and { fg = c.grey, bg = "none" } or { fg = c.black2, bg = c.black2 },
      TelescopePromptNormal = { fg = c.white, bg = c.black2 },
      TelescopePromptPrefix = { fg = c.red, bg = c.black2 },
      TelescopePromptTitle = { fg = c.black, bg = c.red },
      TelescopeResultsDiffAdd = { fg = c.green },
      TelescopeResultsDiffChange = { fg = c.yellow },
      TelescopeResultsDiffDelete = { fg = c.red },
      TelescopeResultsTitle = { fg = c.darker_black, bg = c.darker_black },
      TelescopeSelection = { bg = c.black2, fg = c.white },
    },
    treesitter = {
      ---syntax
      Boolean = { fg = c.base09 },
      Character = { fg = c.base08 },
      Conditional = { fg = c.base0E },
      Constant = { fg = c.base08 },
      Define = { fg = c.base0E, sp = "none" },
      Delimiter = { fg = c.base0F },
      Float = { fg = c.base09 },
      Variable = { fg = c.base05 },
      Function = { fg = c.base0D },
      Identifier = { fg = c.base08, sp = "none" },
      Include = { fg = c.base0D },
      Keyword = { fg = c.base0E },
      Label = { fg = c.base0A },
      Number = { fg = c.base09 },
      Operator = { fg = c.base05, sp = "none" },
      PreProc = { fg = c.base0A },
      Repeat = { fg = c.base0A },
      Special = { fg = c.base0C },
      SpecialChar = { fg = c.base0F },
      Statement = { fg = c.base08 },
      StorageClass = { fg = c.base0A },
      String = { fg = c.base0B },
      Structure = { fg = c.base0E },
      Tag = { fg = c.base0A },
      Todo = { fg = c.base0A, bg = c.base01 },
      Type = { fg = c.base0A, sp = "none" },
      Typedef = { fg = c.base0A },

      ---tokens
      ["@annotation"] = { fg = c.base0F },
      ["@attribute"] = { fg = c.base0A },
      ["@character"] = { fg = c.base08 },
      ["@comment"] = { fg = c.grey_fg },
      ["@comment.danger"] = { fg = c.black2, bg = c.red },
      ["@comment.note"] = { fg = c.black2, bg = c.white },
      ["@comment.todo"] = { fg = c.grey, bg = c.white },
      ["@comment.warning"] = { fg = c.black2, bg = c.base09 },
      ["@constant"] = { fg = c.base08 },
      ["@constant.builtin"] = { fg = c.base09 },
      ["@constant.macro"] = { fg = c.base08 },
      ["@constructor"] = { fg = c.base0C },
      ["@definition"] = { sp = c.base04, underline = true },
      ["@diff.plus"] = { fg = c.green },
      ["@diff.minus"] = { fg = c.red },
      ["@diff.delta"] = { fg = c.light_grey },
      ["@error"] = { fg = c.base08 },
      ["@event"] = { fg = c.base08 },
      ["@function"] = { fg = c.base0D },
      ["@function.builtin"] = { fg = c.base0D },
      ["@function.call"] = { fg = c.base0D },
      ["@function.macro"] = { fg = c.base08 },
      ["@function.method"] = { fg = c.base0D },
      ["@function.method.call"] = { fg = c.base0D },
      ["@keyword"] = { fg = c.base0E },
      ["@keyword.conditional"] = { fg = c.base0E },
      ["@keyword.conditional.ternary"] = { fg = c.base0E },
      ["@keyword.directive"] = { fg = c.base0A },
      ["@keyword.directive.define"] = { fg = c.base0E },
      ["@keyword.exception"] = { fg = c.base08 },
      ["@keyword.function"] = { fg = c.base0E },
      ["@keyword.import"] = { link = "Include" },
      ["@keyword.operator"] = { fg = c.base0E },
      ["@keyword.repeat"] = { fg = c.base0A },
      ["@keyword.return"] = { fg = c.base0E },
      ["@keyword.storage"] = { fg = c.base0A },
      ["@markup.heading"] = { fg = c.base0D },
      ["@markup.italic"] = { italic = true },
      ["@markup.link"] = { fg = c.base08 },
      ["@markup.link.label"] = { fg = c.base0C },
      ["@markup.link.url"] = { fg = c.base09, underline = true },
      ["@markup.list"] = { fg = c.base08 },
      ["@markup.quote"] = { bg = c.black2 },
      ["@markup.raw"] = { fg = c.base09 },
      ["@markup.strikethrough"] = { strikethrough = true },
      ["@markup.strong"] = { bold = true },
      ["@markup.underline"] = { underline = true },
      ["@modifier"] = { fg = c.base08 },
      ["@module"] = { fg = c.base08 },
      ["@number"] = { fg = c.base09 },
      ["@number.float"] = { fg = c.base09 },
      ["@operator"] = { fg = c.base05 },
      ["@property"] = { fg = c.base08 },
      ["@punctuation.bracket"] = { fg = c.base0F },
      ["@punctuation.delimiter"] = { fg = c.base0F },
      ["@reference"] = { fg = c.base05 },
      ["@regexp"] = { fg = c.base0F },
      ["@scope"] = { bold = true },
      ["@string"] = { fg = c.base0B },
      ["@string.escape"] = { fg = c.base0C },
      ["@string.regex"] = { fg = c.base0C },
      ["@symbol"] = { fg = c.base0B },
      ["@tag"] = { fg = c.base0A },
      ["@tag.attribute"] = { fg = c.base08 },
      ["@tag.delimiter"] = { fg = c.base0F },
      ["@text"] = { fg = c.base05 },
      ["@type.builtin"] = { fg = c.base0A },
      ["@text.emphasis"] = { fg = c.base09 },
      ["@text.strike"] = { fg = c.base0F, strikethrough = true },
      ["@variable"] = { fg = c.base05 },
      ["@variable.builtin"] = { fg = c.base09 },
      ["@variable.parameter"] = { fg = c.base08 },
      ["@variable.member"] = { fg = c.base08 },
      ["@variable.member.key"] = { fg = c.base08 },
    },
    trouble = {
      TroubleCode = { fg = c.white },
      TroubleCount = { fg = c.pink },
      TroubleError = { fg = c.red },
      TroubleFile = { fg = c.yellow },
      TroubleFoldIcon = { link = "Folded" },
      TroubleHint = { fg = c.orange },
      TroubleIndent = { link = "Comment" },
      TroubleInformation = { fg = c.white },
      TroubleLocation = { fg = c.red },
      TroubleNormal = { fg = c.white },
      TroublePreview = { fg = c.red },
      TroubleSignError = { link = "DiagnosticError" },
      TroubleSignInformation = { fg = c.white },
      TroubleSignHint = { link = "DiagnosticHint" },
      TroubleSignOther = { link = "DiagnosticNormal" },
      TroubleSignWarning = { link = "DiagnosticWarn" },
      TroubleSource = { fg = c.cyan },
      TroubleText = { fg = c.white },
      TroubleTextError = { fg = c.white },
      TroubleTextHint = { fg = c.white },
      TroubleTextInformation = { fg = c.white },
      TroubleTextWarning = { fg = c.white },
      TroubleWarning = { fg = c.orange },
    },
    vim_illuminate = {
      IlluminatedWordText = { bold = true, reverse = true },
      IlluminatedWordRead = { bold = true, reverse = true },
      IlluminatedWordWrite = { bold = true, reverse = true },
    },
    vim_notify = {
      NotifyDEBUGBorder = { fg = c.grey },
      NotifyDEBUGIcon = { fg = c.grey },
      NotifyDEBUGTitle = { fg = c.grey },
      NotifyERRORBorder = { fg = c.red },
      NotifyERRORIcon = { fg = c.red },
      NotifyERRORTitle = { fg = c.red },
      NotifyINFOBorder = { fg = c.green },
      NotifyINFOIcon = { fg = c.green },
      NotifyINFOTitle = { fg = c.green },
      NotifyTRACEBorder = { fg = c.purple },
      NotifyTRACEIcon = { fg = c.purple },
      NotifyTRACETitle = { fg = c.purple },
      NotifyWARNBorder = { fg = c.orange },
      NotifyWARNIcon = { fg = c.orange },
      NotifyWARNTitle = { fg = c.orange },
    },
    which_key = {
      WhichKey = { fg = c.blue },
      WhichKeyDesc = { fg = c.red },
      WhichKeyGroup = { fg = c.green },
      WhichKeySeparator = { fg = c.light_grey },
      WhichKeyValue = { fg = c.green },
    },
  }

  return hlgroup_map
end

return M
